using Microsoft.AspNetCore.Mvc;
using MonitoramentoAmbiental.Models;
using MonitoramentoAmbiental.Services;
using MonitoramentoAmbiental.ViewModel;

namespace MonitoramentoAmbiental.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RegraCondicaoClimaticaController : ControllerBase
    {
        private readonly RegraCondicaoClimaticaService _regraService;

        public RegraCondicaoClimaticaController(RegraCondicaoClimaticaService regraService)
        {
            _regraService = regraService;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var regras = await _regraService.GetAllAsync();
            var viewModels = regras.Select(r => new RegraCondicaoClimaticaViewModel
            {
                Id = r.Id,
                Descricao = r.Descricao,
                Ativo = r.Ativo,
                TemperaturaMinima = r.TemperaturaMinima.HasValue ? (double)r.TemperaturaMinima.Value : 0.0,
                TemperaturaMaxima = r.TemperaturaMaxima.HasValue ? (double)r.TemperaturaMaxima.Value : 0.0,
                ParqueId = r.ParqueId
            });
            return Ok(viewModels);
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] RegraCondicaoClimaticaViewModel viewModel)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            var regra = new RegraCondicaoClimatica
            {
                Id = 0, // Assuming Id is auto-generated by the database
                Descricao = viewModel.Descricao,
                Ativo = viewModel.Ativo,
                TemperaturaMinima = (float?)viewModel.TemperaturaMinima,
                TemperaturaMaxima = (float?)viewModel.TemperaturaMaxima,
                ParqueId = viewModel.ParqueId,
                Parque = new Parque() // Assuming Parque is a required property
            };

            var created = await _regraService.CreateAsync(regra);

            return CreatedAtAction(nameof(GetAll), new { id = created.Id }, new RegraCondicaoClimaticaViewModel
            {
                Id = created.Id,
                Descricao = created.Descricao,
                Ativo = created.Ativo,
                TemperaturaMinima = created.TemperaturaMinima.HasValue ? (double)created.TemperaturaMinima.Value : 0.0,
                TemperaturaMaxima = created.TemperaturaMaxima.HasValue ? (double)created.TemperaturaMaxima.Value : 0.0,
                ParqueId = created.ParqueId
            });
        }

    }
}
